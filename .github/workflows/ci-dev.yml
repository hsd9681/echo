name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # 리포지토리의 콘텐츠에 대한 읽기 권한

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4  # JDK 21
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew  # gradlew에 실행 권한을 부여

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.4.2

      # 1. Gradle 캐시 설정: 캐시를 사용하여 빌드 속도를 최적화
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}

      # 2. Gradle 빌드 및 테스트 실행
      - name: Build with Gradle
        run: ./gradlew clean build  # 프로젝트를 빌드하고 깨끗하게 초기화

      - name: Run Tests
        run: ./gradlew test  # 프로젝트의 테스트를 실행

      # 3. 테스트 결과를 보고: 테스트 결과를 GitHub Actions의 아티팩트로 저장
      - name: Save test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test
          if-no-files-found: ignore

      # 4. 프로젝트의 의존성 그래프를 생성하고, 이를 GitHub에 제출하여 Dependabot 경고를 활성화
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v3.4.2

      # 5. 빌드 산출물 아티팩트로 저장
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs